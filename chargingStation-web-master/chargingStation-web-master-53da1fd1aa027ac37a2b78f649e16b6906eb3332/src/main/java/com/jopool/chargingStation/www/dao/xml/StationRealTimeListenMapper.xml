<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jopool.chargingStation.www.dao.StationRealTimeListenMapper" >
  <resultMap id="BaseResultMap" type="com.jopool.chargingStation.www.base.entity.StationRealTimeListen" >
    <id column="id" property="id" jdbcType="CHAR" />
    <result column="station_id" property="stationId" jdbcType="CHAR" />
    <result column="temperature" property="temperature" jdbcType="VARCHAR" />
    <result column="voltage" property="voltage" jdbcType="VARCHAR" />
    <result column="energy" property="energy" jdbcType="VARCHAR" />
    <result column="version" property="version" jdbcType="VARCHAR" />
    <result column="data_time" property="dataTime" jdbcType="TIMESTAMP" />
    <result column="is_deleted" property="isDeleted" jdbcType="BIT" />
    <result column="creator" property="creator" jdbcType="CHAR" />
    <result column="creation_time" property="creationTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, station_id, temperature, voltage, energy, version, data_time, is_deleted, creator, 
    creation_time
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from station_real_time_listen
    where id = #{id,jdbcType=CHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from station_real_time_listen
    where id = #{id,jdbcType=CHAR}
  </delete>
  <insert id="insert" parameterType="com.jopool.chargingStation.www.base.entity.StationRealTimeListen" >
    insert into station_real_time_listen (id, station_id, temperature, 
      voltage, energy, version, 
      data_time, is_deleted, creator, 
      creation_time)
    values (#{id,jdbcType=CHAR}, #{stationId,jdbcType=CHAR}, #{temperature,jdbcType=VARCHAR}, 
      #{voltage,jdbcType=VARCHAR}, #{energy,jdbcType=VARCHAR}, #{version,jdbcType=VARCHAR}, 
      #{dataTime,jdbcType=TIMESTAMP}, #{isDeleted,jdbcType=BIT}, #{creator,jdbcType=CHAR}, 
      #{creationTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.jopool.chargingStation.www.base.entity.StationRealTimeListen" >
    insert into station_real_time_listen
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="stationId != null" >
        station_id,
      </if>
      <if test="temperature != null" >
        temperature,
      </if>
      <if test="voltage != null" >
        voltage,
      </if>
      <if test="energy != null" >
        energy,
      </if>
      <if test="version != null" >
        version,
      </if>
      <if test="dataTime != null" >
        data_time,
      </if>
      <if test="isDeleted != null" >
        is_deleted,
      </if>
      <if test="creator != null" >
        creator,
      </if>
      <if test="creationTime != null" >
        creation_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=CHAR},
      </if>
      <if test="stationId != null" >
        #{stationId,jdbcType=CHAR},
      </if>
      <if test="temperature != null" >
        #{temperature,jdbcType=VARCHAR},
      </if>
      <if test="voltage != null" >
        #{voltage,jdbcType=VARCHAR},
      </if>
      <if test="energy != null" >
        #{energy,jdbcType=VARCHAR},
      </if>
      <if test="version != null" >
        #{version,jdbcType=VARCHAR},
      </if>
      <if test="dataTime != null" >
        #{dataTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isDeleted != null" >
        #{isDeleted,jdbcType=BIT},
      </if>
      <if test="creator != null" >
        #{creator,jdbcType=CHAR},
      </if>
      <if test="creationTime != null" >
        #{creationTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.jopool.chargingStation.www.base.entity.StationRealTimeListen" >
    update station_real_time_listen
    <set >
      <if test="stationId != null" >
        station_id = #{stationId,jdbcType=CHAR},
      </if>
      <if test="temperature != null" >
        temperature = #{temperature,jdbcType=VARCHAR},
      </if>
      <if test="voltage != null" >
        voltage = #{voltage,jdbcType=VARCHAR},
      </if>
      <if test="energy != null" >
        energy = #{energy,jdbcType=VARCHAR},
      </if>
      <if test="version != null" >
        version = #{version,jdbcType=VARCHAR},
      </if>
      <if test="dataTime != null" >
        data_time = #{dataTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isDeleted != null" >
        is_deleted = #{isDeleted,jdbcType=BIT},
      </if>
      <if test="creator != null" >
        creator = #{creator,jdbcType=CHAR},
      </if>
      <if test="creationTime != null" >
        creation_time = #{creationTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=CHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.jopool.chargingStation.www.base.entity.StationRealTimeListen" >
    update station_real_time_listen
    set station_id = #{stationId,jdbcType=CHAR},
      temperature = #{temperature,jdbcType=VARCHAR},
      voltage = #{voltage,jdbcType=VARCHAR},
      energy = #{energy,jdbcType=VARCHAR},
      version = #{version,jdbcType=VARCHAR},
      data_time = #{dataTime,jdbcType=TIMESTAMP},
      is_deleted = #{isDeleted,jdbcType=BIT},
      creator = #{creator,jdbcType=CHAR},
      creation_time = #{creationTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=CHAR}
  </update>
  <!--custom-->
  <select id="selectByStationId" resultMap="BaseResultMap" parameterType="java.lang.String" >
      select t2.* from (SELECT id FROM station_real_time_listen
      where station_id = #{stationId,jdbcType=CHAR}
      <if test="dateParam.timeStart != null">
          <![CDATA[ and creation_time >= #{dateParam.timeStart,jdbcType=TIMESTAMP} ]]>
      </if>
      <if test="dateParam.timeEnd != null">
          <![CDATA[ and creation_time <= #{dateParam.timeEnd,jdbcType=TIMESTAMP} ]]>
      </if>
      group by FLOOR(unix_timestamp(creation_time)/${timeInterval})
      order by creation_time asc) t1,station_real_time_listen t2 where t1.id=t2.id ;
  </select>
</mapper>